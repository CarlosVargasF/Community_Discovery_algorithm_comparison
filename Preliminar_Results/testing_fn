import networkx as nx
from cdlib import algorithms
from cdlib import viz
from networkx.algorithms.community import LFR_benchmark_graph
import time
import numpy as np

# Benchmark Parameters
n = [1000, 5000]
t1 = 2.18    #2
t2 = 1.018   #1
mu = 0.5
size_s = [20, 50]  #10, 50 
size_b = [20, 100]

def LFR_bnchmk_tester():    
    for mu in np.linspace(0.1, 1, 10):
        print ("mu = %.2f -------------------------------------------" % (mu))
        #for t1 in np.linspace(2, 2.2, 3):
        #    for t2 in np.linspace(1.02, 1.3, 3):
        #        for sz in np.linspace(10, 30, 5):
        try:
            G = LFR_benchmark_graph(n[0], t1, t2, mu, average_degree=20,
                        min_community=size_s[0], max_community=size_s[1],
                        max_degree=50, max_iters=500, seed=42)

        except Exception as exc:                
            #print ("          t1 = %.2f, t2 = %.2f -> Failed: %s" % (t1, t2, exc))
            print ("   n = %d, t1 = %.2f, t2 = %.2f, min_sz = %d, max_sz = %d -> Failed: %s" % (n[0],t1,t2,size_s[0],size_s[1],exc))
            
        else:
            #print ("          t1 = %.2f, t2 = %.2f -> Succeded" % (t1, t2))
            print ("   n = %d, t1 = %.2f, t2 = %.2f, min_sz = %d, max_sz = %d -> Succeded" % (n[0],t1,t2,size_s[0],size_s[1]))
            
                
start_time = time.time()
LFR_bnchmk_tester()
print("")
print("--- Temps d'ex√©cution: %.1s secondes ---" % (time.time() - start_time))
